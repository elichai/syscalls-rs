/* automatically generated by rust-bindgen */

#![allow(dead_code,non_camel_case_types,non_snake_case)]

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const FSCRYPT_POLICY_FLAGS_PAD_4: u32 = 0;
pub const FSCRYPT_POLICY_FLAGS_PAD_8: u32 = 1;
pub const FSCRYPT_POLICY_FLAGS_PAD_16: u32 = 2;
pub const FSCRYPT_POLICY_FLAGS_PAD_32: u32 = 3;
pub const FSCRYPT_POLICY_FLAGS_PAD_MASK: u32 = 3;
pub const FSCRYPT_POLICY_FLAG_DIRECT_KEY: u32 = 4;
pub const FSCRYPT_POLICY_FLAGS_VALID: u32 = 7;
pub const FSCRYPT_MODE_AES_256_XTS: u32 = 1;
pub const FSCRYPT_MODE_AES_256_CTS: u32 = 4;
pub const FSCRYPT_MODE_AES_128_CBC: u32 = 5;
pub const FSCRYPT_MODE_AES_128_CTS: u32 = 6;
pub const FSCRYPT_MODE_ADIANTUM: u32 = 9;
pub const __FSCRYPT_MODE_MAX: u32 = 9;
pub const FSCRYPT_POLICY_V1: u32 = 0;
pub const FSCRYPT_KEY_DESCRIPTOR_SIZE: u32 = 8;
pub const FSCRYPT_KEY_DESC_PREFIX: &'static [u8; 9usize] = b"fscrypt:\0";
pub const FSCRYPT_KEY_DESC_PREFIX_SIZE: u32 = 8;
pub const FSCRYPT_MAX_KEY_SIZE: u32 = 64;
pub const FSCRYPT_POLICY_V2: u32 = 2;
pub const FSCRYPT_KEY_IDENTIFIER_SIZE: u32 = 16;
pub const FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR: u32 = 1;
pub const FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER: u32 = 2;
pub const FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY: u32 = 1;
pub const FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS: u32 = 2;
pub const FSCRYPT_KEY_STATUS_ABSENT: u32 = 1;
pub const FSCRYPT_KEY_STATUS_PRESENT: u32 = 2;
pub const FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED: u32 = 3;
pub const FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF: u32 = 1;
pub const FS_KEY_DESCRIPTOR_SIZE: u32 = 8;
pub const FS_POLICY_FLAGS_PAD_4: u32 = 0;
pub const FS_POLICY_FLAGS_PAD_8: u32 = 1;
pub const FS_POLICY_FLAGS_PAD_16: u32 = 2;
pub const FS_POLICY_FLAGS_PAD_32: u32 = 3;
pub const FS_POLICY_FLAGS_PAD_MASK: u32 = 3;
pub const FS_POLICY_FLAG_DIRECT_KEY: u32 = 4;
pub const FS_POLICY_FLAGS_VALID: u32 = 7;
pub const FS_ENCRYPTION_MODE_INVALID: u32 = 0;
pub const FS_ENCRYPTION_MODE_AES_256_XTS: u32 = 1;
pub const FS_ENCRYPTION_MODE_AES_256_GCM: u32 = 2;
pub const FS_ENCRYPTION_MODE_AES_256_CBC: u32 = 3;
pub const FS_ENCRYPTION_MODE_AES_256_CTS: u32 = 4;
pub const FS_ENCRYPTION_MODE_AES_128_CBC: u32 = 5;
pub const FS_ENCRYPTION_MODE_AES_128_CTS: u32 = 6;
pub const FS_ENCRYPTION_MODE_SPECK128_256_XTS: u32 = 7;
pub const FS_ENCRYPTION_MODE_SPECK128_256_CTS: u32 = 8;
pub const FS_ENCRYPTION_MODE_ADIANTUM: u32 = 9;
pub const FS_KEY_DESC_PREFIX: &'static [u8; 9usize] = b"fscrypt:\0";
pub const FS_KEY_DESC_PREFIX_SIZE: u32 = 8;
pub const FS_MAX_KEY_SIZE: u32 = 64;
pub const MS_RDONLY: u32 = 1;
pub const MS_NOSUID: u32 = 2;
pub const MS_NODEV: u32 = 4;
pub const MS_NOEXEC: u32 = 8;
pub const MS_SYNCHRONOUS: u32 = 16;
pub const MS_REMOUNT: u32 = 32;
pub const MS_MANDLOCK: u32 = 64;
pub const MS_DIRSYNC: u32 = 128;
pub const MS_NOATIME: u32 = 1024;
pub const MS_NODIRATIME: u32 = 2048;
pub const MS_BIND: u32 = 4096;
pub const MS_MOVE: u32 = 8192;
pub const MS_REC: u32 = 16384;
pub const MS_VERBOSE: u32 = 32768;
pub const MS_SILENT: u32 = 32768;
pub const MS_POSIXACL: u32 = 65536;
pub const MS_UNBINDABLE: u32 = 131072;
pub const MS_PRIVATE: u32 = 262144;
pub const MS_SLAVE: u32 = 524288;
pub const MS_SHARED: u32 = 1048576;
pub const MS_RELATIME: u32 = 2097152;
pub const MS_KERNMOUNT: u32 = 4194304;
pub const MS_I_VERSION: u32 = 8388608;
pub const MS_STRICTATIME: u32 = 16777216;
pub const MS_LAZYTIME: u32 = 33554432;
pub const MS_SUBMOUNT: u32 = 67108864;
pub const MS_NOREMOTELOCK: u32 = 134217728;
pub const MS_NOSEC: u32 = 268435456;
pub const MS_BORN: u32 = 536870912;
pub const MS_ACTIVE: u32 = 1073741824;
pub const MS_NOUSER: u32 = 2147483648;
pub const MS_RMT_MASK: u32 = 41943121;
pub const MS_MGC_VAL: u32 = 3236757504;
pub const MS_MGC_MSK: u32 = 4294901760;
pub const OPEN_TREE_CLONE: u32 = 1;
pub const MOVE_MOUNT_F_SYMLINKS: u32 = 1;
pub const MOVE_MOUNT_F_AUTOMOUNTS: u32 = 2;
pub const MOVE_MOUNT_F_EMPTY_PATH: u32 = 4;
pub const MOVE_MOUNT_T_SYMLINKS: u32 = 16;
pub const MOVE_MOUNT_T_AUTOMOUNTS: u32 = 32;
pub const MOVE_MOUNT_T_EMPTY_PATH: u32 = 64;
pub const MOVE_MOUNT__MASK: u32 = 119;
pub const FSOPEN_CLOEXEC: u32 = 1;
pub const FSPICK_CLOEXEC: u32 = 1;
pub const FSPICK_SYMLINK_NOFOLLOW: u32 = 2;
pub const FSPICK_NO_AUTOMOUNT: u32 = 4;
pub const FSPICK_EMPTY_PATH: u32 = 8;
pub const FSMOUNT_CLOEXEC: u32 = 1;
pub const MOUNT_ATTR_RDONLY: u32 = 1;
pub const MOUNT_ATTR_NOSUID: u32 = 2;
pub const MOUNT_ATTR_NODEV: u32 = 4;
pub const MOUNT_ATTR_NOEXEC: u32 = 8;
pub const MOUNT_ATTR__ATIME: u32 = 112;
pub const MOUNT_ATTR_RELATIME: u32 = 0;
pub const MOUNT_ATTR_NOATIME: u32 = 16;
pub const MOUNT_ATTR_STRICTATIME: u32 = 32;
pub const MOUNT_ATTR_NODIRATIME: u32 = 128;
pub const INR_OPEN_CUR: u32 = 1024;
pub const INR_OPEN_MAX: u32 = 4096;
pub const BLOCK_SIZE_BITS: u32 = 10;
pub const BLOCK_SIZE: u32 = 1024;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const SEEK_MAX: u32 = 4;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const FILE_DEDUPE_RANGE_SAME: u32 = 0;
pub const FILE_DEDUPE_RANGE_DIFFERS: u32 = 1;
pub const NR_FILE: u32 = 8192;
pub const FS_XFLAG_REALTIME: u32 = 1;
pub const FS_XFLAG_PREALLOC: u32 = 2;
pub const FS_XFLAG_IMMUTABLE: u32 = 8;
pub const FS_XFLAG_APPEND: u32 = 16;
pub const FS_XFLAG_SYNC: u32 = 32;
pub const FS_XFLAG_NOATIME: u32 = 64;
pub const FS_XFLAG_NODUMP: u32 = 128;
pub const FS_XFLAG_RTINHERIT: u32 = 256;
pub const FS_XFLAG_PROJINHERIT: u32 = 512;
pub const FS_XFLAG_NOSYMLINKS: u32 = 1024;
pub const FS_XFLAG_EXTSIZE: u32 = 2048;
pub const FS_XFLAG_EXTSZINHERIT: u32 = 4096;
pub const FS_XFLAG_NODEFRAG: u32 = 8192;
pub const FS_XFLAG_FILESTREAM: u32 = 16384;
pub const FS_XFLAG_DAX: u32 = 32768;
pub const FS_XFLAG_COWEXTSIZE: u32 = 65536;
pub const FS_XFLAG_HASATTR: u32 = 2147483648;
pub const BMAP_IOCTL: u32 = 1;
pub const FSLABEL_MAX: u32 = 256;
pub const FS_SECRM_FL: u32 = 1;
pub const FS_UNRM_FL: u32 = 2;
pub const FS_COMPR_FL: u32 = 4;
pub const FS_SYNC_FL: u32 = 8;
pub const FS_IMMUTABLE_FL: u32 = 16;
pub const FS_APPEND_FL: u32 = 32;
pub const FS_NODUMP_FL: u32 = 64;
pub const FS_NOATIME_FL: u32 = 128;
pub const FS_DIRTY_FL: u32 = 256;
pub const FS_COMPRBLK_FL: u32 = 512;
pub const FS_NOCOMP_FL: u32 = 1024;
pub const FS_ENCRYPT_FL: u32 = 2048;
pub const FS_BTREE_FL: u32 = 4096;
pub const FS_INDEX_FL: u32 = 4096;
pub const FS_IMAGIC_FL: u32 = 8192;
pub const FS_JOURNAL_DATA_FL: u32 = 16384;
pub const FS_NOTAIL_FL: u32 = 32768;
pub const FS_DIRSYNC_FL: u32 = 65536;
pub const FS_TOPDIR_FL: u32 = 131072;
pub const FS_HUGE_FILE_FL: u32 = 262144;
pub const FS_EXTENT_FL: u32 = 524288;
pub const FS_VERITY_FL: u32 = 1048576;
pub const FS_EA_INODE_FL: u32 = 2097152;
pub const FS_EOFBLOCKS_FL: u32 = 4194304;
pub const FS_NOCOW_FL: u32 = 8388608;
pub const FS_INLINE_DATA_FL: u32 = 268435456;
pub const FS_PROJINHERIT_FL: u32 = 536870912;
pub const FS_CASEFOLD_FL: u32 = 1073741824;
pub const FS_RESERVED_FL: u32 = 2147483648;
pub const FS_FL_USER_VISIBLE: u32 = 253951;
pub const FS_FL_USER_MODIFIABLE: u32 = 229631;
pub const SYNC_FILE_RANGE_WAIT_BEFORE: u32 = 1;
pub const SYNC_FILE_RANGE_WRITE: u32 = 2;
pub const SYNC_FILE_RANGE_WAIT_AFTER: u32 = 4;
pub const SYNC_FILE_RANGE_WRITE_AND_WAIT: u32 = 7;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fscrypt_policy_v1 {
    pub version: __u8,
    pub contents_encryption_mode: __u8,
    pub filenames_encryption_mode: __u8,
    pub flags: __u8,
    pub master_key_descriptor: [__u8; 8usize],
}
#[test]
fn bindgen_test_layout_fscrypt_policy_v1() {
    assert_eq!(
        ::std::mem::size_of::<fscrypt_policy_v1>(),
        12usize,
        concat!("Size of: ", stringify!(fscrypt_policy_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<fscrypt_policy_v1>(),
        1usize,
        concat!("Alignment of ", stringify!(fscrypt_policy_v1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fscrypt_policy_v1>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_policy_v1),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_policy_v1>())).contents_encryption_mode as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_policy_v1),
            "::",
            stringify!(contents_encryption_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_policy_v1>())).filenames_encryption_mode as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_policy_v1),
            "::",
            stringify!(filenames_encryption_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fscrypt_policy_v1>())).flags as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_policy_v1),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_policy_v1>())).master_key_descriptor as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_policy_v1),
            "::",
            stringify!(master_key_descriptor)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fscrypt_key {
    pub mode: __u32,
    pub raw: [__u8; 64usize],
    pub size: __u32,
}
#[test]
fn bindgen_test_layout_fscrypt_key() {
    assert_eq!(
        ::std::mem::size_of::<fscrypt_key>(),
        72usize,
        concat!("Size of: ", stringify!(fscrypt_key))
    );
    assert_eq!(
        ::std::mem::align_of::<fscrypt_key>(),
        4usize,
        concat!("Alignment of ", stringify!(fscrypt_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fscrypt_key>())).mode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_key),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fscrypt_key>())).raw as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_key),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fscrypt_key>())).size as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_key),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fscrypt_policy_v2 {
    pub version: __u8,
    pub contents_encryption_mode: __u8,
    pub filenames_encryption_mode: __u8,
    pub flags: __u8,
    pub __reserved: [__u8; 4usize],
    pub master_key_identifier: [__u8; 16usize],
}
#[test]
fn bindgen_test_layout_fscrypt_policy_v2() {
    assert_eq!(
        ::std::mem::size_of::<fscrypt_policy_v2>(),
        24usize,
        concat!("Size of: ", stringify!(fscrypt_policy_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<fscrypt_policy_v2>(),
        1usize,
        concat!("Alignment of ", stringify!(fscrypt_policy_v2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fscrypt_policy_v2>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_policy_v2),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_policy_v2>())).contents_encryption_mode as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_policy_v2),
            "::",
            stringify!(contents_encryption_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_policy_v2>())).filenames_encryption_mode as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_policy_v2),
            "::",
            stringify!(filenames_encryption_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fscrypt_policy_v2>())).flags as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_policy_v2),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fscrypt_policy_v2>())).__reserved as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_policy_v2),
            "::",
            stringify!(__reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_policy_v2>())).master_key_identifier as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_policy_v2),
            "::",
            stringify!(master_key_identifier)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fscrypt_get_policy_ex_arg {
    pub policy_size: __u64,
    pub policy: fscrypt_get_policy_ex_arg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fscrypt_get_policy_ex_arg__bindgen_ty_1 {
    pub version: __u8,
    pub v1: fscrypt_policy_v1,
    pub v2: fscrypt_policy_v2,
    _bindgen_union_align: [u8; 24usize],
}
#[test]
fn bindgen_test_layout_fscrypt_get_policy_ex_arg__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<fscrypt_get_policy_ex_arg__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(fscrypt_get_policy_ex_arg__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<fscrypt_get_policy_ex_arg__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(fscrypt_get_policy_ex_arg__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_get_policy_ex_arg__bindgen_ty_1>())).version as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_get_policy_ex_arg__bindgen_ty_1),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_get_policy_ex_arg__bindgen_ty_1>())).v1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_get_policy_ex_arg__bindgen_ty_1),
            "::",
            stringify!(v1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_get_policy_ex_arg__bindgen_ty_1>())).v2 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_get_policy_ex_arg__bindgen_ty_1),
            "::",
            stringify!(v2)
        )
    );
}
#[test]
fn bindgen_test_layout_fscrypt_get_policy_ex_arg() {
    assert_eq!(
        ::std::mem::size_of::<fscrypt_get_policy_ex_arg>(),
        32usize,
        concat!("Size of: ", stringify!(fscrypt_get_policy_ex_arg))
    );
    assert_eq!(
        ::std::mem::align_of::<fscrypt_get_policy_ex_arg>(),
        8usize,
        concat!("Alignment of ", stringify!(fscrypt_get_policy_ex_arg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_get_policy_ex_arg>())).policy_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_get_policy_ex_arg),
            "::",
            stringify!(policy_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_get_policy_ex_arg>())).policy as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_get_policy_ex_arg),
            "::",
            stringify!(policy)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fscrypt_key_specifier {
    pub type_: __u32,
    pub __reserved: __u32,
    pub u: fscrypt_key_specifier__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fscrypt_key_specifier__bindgen_ty_1 {
    pub __reserved: [__u8; 32usize],
    pub descriptor: [__u8; 8usize],
    pub identifier: [__u8; 16usize],
    _bindgen_union_align: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_fscrypt_key_specifier__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<fscrypt_key_specifier__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(fscrypt_key_specifier__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<fscrypt_key_specifier__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(fscrypt_key_specifier__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_key_specifier__bindgen_ty_1>())).__reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_key_specifier__bindgen_ty_1),
            "::",
            stringify!(__reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_key_specifier__bindgen_ty_1>())).descriptor as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_key_specifier__bindgen_ty_1),
            "::",
            stringify!(descriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_key_specifier__bindgen_ty_1>())).identifier as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_key_specifier__bindgen_ty_1),
            "::",
            stringify!(identifier)
        )
    );
}
#[test]
fn bindgen_test_layout_fscrypt_key_specifier() {
    assert_eq!(
        ::std::mem::size_of::<fscrypt_key_specifier>(),
        40usize,
        concat!("Size of: ", stringify!(fscrypt_key_specifier))
    );
    assert_eq!(
        ::std::mem::align_of::<fscrypt_key_specifier>(),
        4usize,
        concat!("Alignment of ", stringify!(fscrypt_key_specifier))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fscrypt_key_specifier>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_key_specifier),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_key_specifier>())).__reserved as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_key_specifier),
            "::",
            stringify!(__reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fscrypt_key_specifier>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_key_specifier),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
pub struct fscrypt_add_key_arg {
    pub key_spec: fscrypt_key_specifier,
    pub raw_size: __u32,
    pub __reserved: [__u32; 9usize],
    pub raw: __IncompleteArrayField<__u8>,
}
#[test]
fn bindgen_test_layout_fscrypt_add_key_arg() {
    assert_eq!(
        ::std::mem::size_of::<fscrypt_add_key_arg>(),
        80usize,
        concat!("Size of: ", stringify!(fscrypt_add_key_arg))
    );
    assert_eq!(
        ::std::mem::align_of::<fscrypt_add_key_arg>(),
        4usize,
        concat!("Alignment of ", stringify!(fscrypt_add_key_arg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fscrypt_add_key_arg>())).key_spec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_add_key_arg),
            "::",
            stringify!(key_spec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fscrypt_add_key_arg>())).raw_size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_add_key_arg),
            "::",
            stringify!(raw_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fscrypt_add_key_arg>())).__reserved as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_add_key_arg),
            "::",
            stringify!(__reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fscrypt_add_key_arg>())).raw as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_add_key_arg),
            "::",
            stringify!(raw)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fscrypt_remove_key_arg {
    pub key_spec: fscrypt_key_specifier,
    pub removal_status_flags: __u32,
    pub __reserved: [__u32; 5usize],
}
#[test]
fn bindgen_test_layout_fscrypt_remove_key_arg() {
    assert_eq!(
        ::std::mem::size_of::<fscrypt_remove_key_arg>(),
        64usize,
        concat!("Size of: ", stringify!(fscrypt_remove_key_arg))
    );
    assert_eq!(
        ::std::mem::align_of::<fscrypt_remove_key_arg>(),
        4usize,
        concat!("Alignment of ", stringify!(fscrypt_remove_key_arg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fscrypt_remove_key_arg>())).key_spec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_remove_key_arg),
            "::",
            stringify!(key_spec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_remove_key_arg>())).removal_status_flags as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_remove_key_arg),
            "::",
            stringify!(removal_status_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_remove_key_arg>())).__reserved as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_remove_key_arg),
            "::",
            stringify!(__reserved)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fscrypt_get_key_status_arg {
    pub key_spec: fscrypt_key_specifier,
    pub __reserved: [__u32; 6usize],
    pub status: __u32,
    pub status_flags: __u32,
    pub user_count: __u32,
    pub __out_reserved: [__u32; 13usize],
}
#[test]
fn bindgen_test_layout_fscrypt_get_key_status_arg() {
    assert_eq!(
        ::std::mem::size_of::<fscrypt_get_key_status_arg>(),
        128usize,
        concat!("Size of: ", stringify!(fscrypt_get_key_status_arg))
    );
    assert_eq!(
        ::std::mem::align_of::<fscrypt_get_key_status_arg>(),
        4usize,
        concat!("Alignment of ", stringify!(fscrypt_get_key_status_arg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_get_key_status_arg>())).key_spec as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_get_key_status_arg),
            "::",
            stringify!(key_spec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_get_key_status_arg>())).__reserved as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_get_key_status_arg),
            "::",
            stringify!(__reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_get_key_status_arg>())).status as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_get_key_status_arg),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_get_key_status_arg>())).status_flags as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_get_key_status_arg),
            "::",
            stringify!(status_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_get_key_status_arg>())).user_count as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_get_key_status_arg),
            "::",
            stringify!(user_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_get_key_status_arg>())).__out_reserved as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_get_key_status_arg),
            "::",
            stringify!(__out_reserved)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum fsconfig_command {
    FSCONFIG_SET_FLAG = 0,
    FSCONFIG_SET_STRING = 1,
    FSCONFIG_SET_BINARY = 2,
    FSCONFIG_SET_PATH = 3,
    FSCONFIG_SET_PATH_EMPTY = 4,
    FSCONFIG_SET_FD = 5,
    FSCONFIG_CMD_CREATE = 6,
    FSCONFIG_CMD_RECONFIGURE = 7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_clone_range {
    pub src_fd: __s64,
    pub src_offset: __u64,
    pub src_length: __u64,
    pub dest_offset: __u64,
}
#[test]
fn bindgen_test_layout_file_clone_range() {
    assert_eq!(
        ::std::mem::size_of::<file_clone_range>(),
        32usize,
        concat!("Size of: ", stringify!(file_clone_range))
    );
    assert_eq!(
        ::std::mem::align_of::<file_clone_range>(),
        8usize,
        concat!("Alignment of ", stringify!(file_clone_range))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_clone_range>())).src_fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_clone_range),
            "::",
            stringify!(src_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_clone_range>())).src_offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(file_clone_range),
            "::",
            stringify!(src_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_clone_range>())).src_length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(file_clone_range),
            "::",
            stringify!(src_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_clone_range>())).dest_offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(file_clone_range),
            "::",
            stringify!(dest_offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstrim_range {
    pub start: __u64,
    pub len: __u64,
    pub minlen: __u64,
}
#[test]
fn bindgen_test_layout_fstrim_range() {
    assert_eq!(
        ::std::mem::size_of::<fstrim_range>(),
        24usize,
        concat!("Size of: ", stringify!(fstrim_range))
    );
    assert_eq!(
        ::std::mem::align_of::<fstrim_range>(),
        8usize,
        concat!("Alignment of ", stringify!(fstrim_range))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstrim_range>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fstrim_range),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstrim_range>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fstrim_range),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstrim_range>())).minlen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fstrim_range),
            "::",
            stringify!(minlen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_dedupe_range_info {
    pub dest_fd: __s64,
    pub dest_offset: __u64,
    pub bytes_deduped: __u64,
    pub status: __s32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_file_dedupe_range_info() {
    assert_eq!(
        ::std::mem::size_of::<file_dedupe_range_info>(),
        32usize,
        concat!("Size of: ", stringify!(file_dedupe_range_info))
    );
    assert_eq!(
        ::std::mem::align_of::<file_dedupe_range_info>(),
        8usize,
        concat!("Alignment of ", stringify!(file_dedupe_range_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_dedupe_range_info>())).dest_fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range_info),
            "::",
            stringify!(dest_fd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<file_dedupe_range_info>())).dest_offset as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range_info),
            "::",
            stringify!(dest_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<file_dedupe_range_info>())).bytes_deduped as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range_info),
            "::",
            stringify!(bytes_deduped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_dedupe_range_info>())).status as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range_info),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_dedupe_range_info>())).reserved as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range_info),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct file_dedupe_range {
    pub src_offset: __u64,
    pub src_length: __u64,
    pub dest_count: __u16,
    pub reserved1: __u16,
    pub reserved2: __u32,
    pub info: __IncompleteArrayField<file_dedupe_range_info>,
}
#[test]
fn bindgen_test_layout_file_dedupe_range() {
    assert_eq!(
        ::std::mem::size_of::<file_dedupe_range>(),
        24usize,
        concat!("Size of: ", stringify!(file_dedupe_range))
    );
    assert_eq!(
        ::std::mem::align_of::<file_dedupe_range>(),
        8usize,
        concat!("Alignment of ", stringify!(file_dedupe_range))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_dedupe_range>())).src_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range),
            "::",
            stringify!(src_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_dedupe_range>())).src_length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range),
            "::",
            stringify!(src_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_dedupe_range>())).dest_count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range),
            "::",
            stringify!(dest_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_dedupe_range>())).reserved1 as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_dedupe_range>())).reserved2 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_dedupe_range>())).info as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct files_stat_struct {
    pub nr_files: ::std::os::raw::c_ulong,
    pub nr_free_files: ::std::os::raw::c_ulong,
    pub max_files: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_files_stat_struct() {
    assert_eq!(
        ::std::mem::size_of::<files_stat_struct>(),
        24usize,
        concat!("Size of: ", stringify!(files_stat_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<files_stat_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(files_stat_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<files_stat_struct>())).nr_files as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(files_stat_struct),
            "::",
            stringify!(nr_files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<files_stat_struct>())).nr_free_files as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(files_stat_struct),
            "::",
            stringify!(nr_free_files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<files_stat_struct>())).max_files as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(files_stat_struct),
            "::",
            stringify!(max_files)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inodes_stat_t {
    pub nr_inodes: ::std::os::raw::c_long,
    pub nr_unused: ::std::os::raw::c_long,
    pub dummy: [::std::os::raw::c_long; 5usize],
}
#[test]
fn bindgen_test_layout_inodes_stat_t() {
    assert_eq!(
        ::std::mem::size_of::<inodes_stat_t>(),
        56usize,
        concat!("Size of: ", stringify!(inodes_stat_t))
    );
    assert_eq!(
        ::std::mem::align_of::<inodes_stat_t>(),
        8usize,
        concat!("Alignment of ", stringify!(inodes_stat_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inodes_stat_t>())).nr_inodes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inodes_stat_t),
            "::",
            stringify!(nr_inodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inodes_stat_t>())).nr_unused as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inodes_stat_t),
            "::",
            stringify!(nr_unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inodes_stat_t>())).dummy as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(inodes_stat_t),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsxattr {
    pub fsx_xflags: __u32,
    pub fsx_extsize: __u32,
    pub fsx_nextents: __u32,
    pub fsx_projid: __u32,
    pub fsx_cowextsize: __u32,
    pub fsx_pad: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_fsxattr() {
    assert_eq!(
        ::std::mem::size_of::<fsxattr>(),
        28usize,
        concat!("Size of: ", stringify!(fsxattr))
    );
    assert_eq!(
        ::std::mem::align_of::<fsxattr>(),
        4usize,
        concat!("Alignment of ", stringify!(fsxattr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsxattr>())).fsx_xflags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fsxattr),
            "::",
            stringify!(fsx_xflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsxattr>())).fsx_extsize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fsxattr),
            "::",
            stringify!(fsx_extsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsxattr>())).fsx_nextents as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fsxattr),
            "::",
            stringify!(fsx_nextents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsxattr>())).fsx_projid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fsxattr),
            "::",
            stringify!(fsx_projid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsxattr>())).fsx_cowextsize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fsxattr),
            "::",
            stringify!(fsx_cowextsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsxattr>())).fsx_pad as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fsxattr),
            "::",
            stringify!(fsx_pad)
        )
    );
}
pub type __kernel_rwf_t = ::std::os::raw::c_int;
